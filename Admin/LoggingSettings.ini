# Sample boostlogger setting for eWam and related products
#
# See http://www.boost.org/doc/libs/1_60_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.setup.filter_formatter
#
# Many of the property values have to be in quotes, best to just use quotes for all of them.
# hello

[Core]
# Set DisableLogging to true to disable all logging.
DisableLogging="false"
 

# ===DATALF will write logs into a text file on local machine===
[Sinks.DATALF]
Destination="TextFile"
# If Asynchronous true then thread dedicated to writing to log, otherwise blocks main thread to write.
Asynchronous="true"
# If AutoFlush is true then non-buffered output
AutoFlush="true"
# Line Formats available: TimeStamp, Uptime, Severity, LineID (counter), ProcessID, ThreadID
# TimeStamp and Uptime support boost date time format:
#    http://www.boost.org/doc/libs/1_60_0/doc/html/date_time/date_time_io.html#date_time.format_flags
#Format="[TimeStamp: %TimeStamp(format=\"%Y-%m-%d %H:%M:%S.%f\")%][UpTime: %Uptime(format=\"%O:%M:%S.%f\")%][ProcessID: %Process_ID%][ThreadID: %Thread_ID% %Thread_Index%][Severity: %Severity%] [Module: %moduleName%] [Function : %funcName%] [Message: %Message%] [%Last_Interpreted_Method%]"
# Format without field names and without UpTime and Last_Interpreted_Method
Format="[%TimeStamp(format=\"%Y-%m-%d %H:%M:%S.%f\")%][%Process_ID%][%Thread_ID%][%Severity%][%moduleName%][%funcName%][%Message%]"
# very simple formats : only the message and the source
#Format=[%moduleName%][%funcName%][%Message%]
#Format=%moduleName%.%funcName% %Message%
# Target directory in which rotated files will be stored.
Target="(WYDE-ERR)\BoostLogTrace"
# FileName pattern to use. %N is a counter for files.
FileName="(WYDE-ERR)\BoostLogTrace\app_datalog_%N.log"
# RotationSize in bytes, File size, in bytes, upon which file rotation will be performed.
# Time based rotation also available via RotationInterval and RotationTimePoint see boost log docs.
RotationSize="10485760"
# Matching used so that only files matching FileName pattern are deleted.
ScanForFiles="Matching"
# MaxSize - Total size of files in the target directory in bytes upon which the oldest file will be deleted.
#MaxSize=100485760
# MinFreeSpace - Minimum free space in the Target directory in bytes. Above this value oldest file is deleted.
#MinFreeSpace=1485760
# Specify level of log, options are: trace, debug, info, warning, error, fatal
# Specify Channel otherwise all log output will be included.
Filter="%Severity% >= info"
# AutoNewline - Controls whether the backend should automatically insert a trailing newline after every log record, see auto_newline_mode. If not specified, the default value is "InsertIfMissing".
# AutoNewline = "InsertIfMissing"
# Append - Enables or disables appending to the existing file instead of overwriting it. If not specified, the default value false is assumed.
# Append = "false"
# EnableFinalRotation - Enables or disables final file rotation on sink destruction, which typically happens on program termination. If not specified, the default value true is assumed.
# RotationTimePoint - Time point or a predicate that detects at what moment of time to perform log file rotation. See also the RotationInterval parameter and the note below.
# RotationInterval - Time interval, in seconds, upon which file rotation will be performed. See also the RotationTimePoint parameter and the note below.
# MaxFiles - Total number of files in the target directory, upon which the oldest file will be deleted. If not specified, no count-based file cleanup will be performed.

# ===Sinks.EventLogger below sinks will write logs into Windows Events ===
# Commented out because the very first time we have to run eWam as Administrator.
#[Sinks.EventLogger]
#Destination="SimpleEventLog"
#LogName="My_Application"
#Asynchronous="true"
#AutoFlush="true"
#LogSource="My_Source"
#Filter="%Severity% >= fatal"



 
# ===Sinks.Syslog below will send logs to a server such as splunk or any log management tool===
# Commented out because need configuration of tier log management tool
[Sinks.Syslog]
Destination="Syslog"
Asynchronous="true"
AutoFlush="true"
#LocalAddress="10.0.0.69"
TargetAddress="51.103.55.89"
Filter="%Severity% >= info"
Format="[%TimeStamp(format=\"%Y-%m-%d %H:%M:%S.%f\")%][%Process_ID%][%Thread_ID%][%Severity%][%moduleName%][%funcName%][%Message%]"
 
 
 # ===Sinks.Console below will send logs console output===
[Sinks.Console]
# Remove the following lines to disable console logging
Destination="Console"
# If AutoFlush is true then non-buffered output
AutoFlush="true"
# Line Formats available: TimeStamp, Uptime, Severity, LineID (counter), ProcessID, ThreadID
# TimeStamp and Uptime support boost date time format:
#    http://www.boost.org/doc/libs/1_60_0/doc/html/date_time/date_time_io.html#date_time.format_flags
# Format with explicit fields
#Format="[TimeStamp: %TimeStamp(format=\"%Y-%m-%d %H:%M:%S.%f\")%][UpTime: %Uptime(format=\"%O:%M:%S.%f\")%][ProcessID: %Process_ID%][ThreadID: %Thread_ID% %Thread_Index%][Severity: %Severity%] [Module: %moduleName%] [Function : %funcName%] [Message: %Message%] [%Last_Interpreted_Method%]"
# Format without field names and without UpTime and Last_Interpreted_Method
Format="[%TimeStamp(format=\"%Y-%m-%d %H:%M:%S.%f\")%][%Process_ID%][%Thread_ID%][%Severity%][%moduleName%][%funcName%][%Message%]"
# very simple formats : only the message and the source
#Format=[%moduleName%][%funcName%][%Message%]
#Format=%moduleName%.%funcName% %Message%


# Specify level of log, options are: trace, debug, info, warning, error, fatal
Filter="%Severity% >= info"